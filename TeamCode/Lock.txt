Adding a Lock would allow Scheduleables with no requirements to take more than one cycle to run.

However, this would be very difficult because then the Scheduleable::Run() would need to
take as a parameter a int runningID, so that it could lock to that ID.

Additionally, in WhenAny and FSM groups where scheduleables could be interrupted,
before I return true I would need to loop through all scheduleables and check whether the lockID 
is the currentID, and unlock it if it is.

The best way to do this would be to add special cleaup functions that are guaranteed to run
even if a scheduleable is interrupted.

I might add such functions anyway at some point, so if I do, I will probably add back locks.


UPDATEEEEEEEEEEEEEEEEEEEEE:
I think I'll make FSMGroups only change state after a Scheduleable returns true.
If I could encode automatic unlocking into Scheduleables with no requirements, this would make FSMGroups much more viable.
For WhenAnyGroups, I would still have to manually unlock every no requirements Scheduleable once the Group returns true.
To automatically unlock, in Run AND the locked boolean by the inverse of the return value of backingFunction

Also, Scheduleable::Run() would not need to take in a runningID, since the Scheduleable calling another Scheduleable's Run
	could first TryUnlock the other Scheduleable with it's own lockingID
The only change this would require, is setting the lockingID for Scheduleables with requirements, which can be done with a
	function called "SetRunningID" or something like that

Okay acutally it's probably just better for Scheduleable::Run() to take in a runningID.
The beginning of Run could be:
if(!lockinigID)
{
	lockingID = runningID;
}
else if(lockingID != runningID)
{
	return false;
}

The end of Run could be:
lockingID *= !result; //result is bool returned by Run()

If I go this route, I will probably have Run() return a flags enum instead of a boolean:
enum class ReturnFlags : unsigned char
{
	ReturnBit = 1,
	FailedUnlock = 2,
	FailedCondition = 4, //Can be used to make it so WhenAnyGroup doesn't return if a condition fails
	ReturnedEarly = 8, //Can be used to make TryCatchGroup
	//And maybe others if I think of it
};



To make locks work:

I would need a function to get a unique ID for any scheduleable, which could be a combination of
the local ID the group assigns it, and the group's globalID. However, I should make sure 0
is not a valid ID, so I can use that to check if a Scheduleable has no locks.

I should add a TryUnlock in the run, and free the lock before I return true;

PseudoCode:

//checks if the Scheduleable has no requirements and is locked i.e. shouldn't run
!requirementFlags & lock

//checks whether a Scheduleable can be unlocked, as well as sets a lock if none exist
if (!unlockKey)
{
	unlockKey = key;
	lock = false;
	return true;
}
if (unlockKey == key)
{
	lock = false;
	return true;
}
return false;
